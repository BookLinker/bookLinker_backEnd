package com.books_recommend.book_recommend.controller;

import com.books_recommend.book_recommend.repository.KakaoBookRepository;
import com.books_recommend.book_recommend.service.KakaoBookService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.util.Map;

@Controller
@RequiredArgsConstructor
class KakaoBookController {
    private final KakaoBookService service;

    @Value("${kakao.key}")
    private String key;

    @GetMapping("/kakao")
    public Map<String, Object> callApi(@RequestParam String query) {
        return service.searchBooks(query, key);
    }
}

//public class KakaoBookController {
//
//    private final KakaoBookRepository repository;
//
//    private final String url = "https://dapi.kakao.com/v3/search/book";
//    private final String key = "rest api key";
//
//    @GetMapping("/kakao")
//    public Map callApi(@RequestParam String query) {
//        RestTemplate restTemplate = new RestTemplate();
//        HttpHeaders httpHeaders = new HttpHeaders();
//        httpHeaders.set("Authorization", "KakaoAK " + key); //Authorization 설정
//        HttpEntity<String> httpEntity = new HttpEntity<>(httpHeaders); //엔티티로 만들기
//        URI targetUrl = UriComponentsBuilder
//            .fromUriString(url) //기본 url
//            .queryParam("query", query) //인자
//            .build()
//            .encode(StandardCharsets.UTF_8) //인코딩
//            .toUri();
//
//        //GetForObject는 헤더를 정의할 수 없음
//        ResponseEntity<Map> result = restTemplate.exchange(targetUrl, HttpMethod.GET, httpEntity, Map.class);
//        return result.getBody(); //내용 반환
//    }
//}